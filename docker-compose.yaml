services:
# APPLICATIONS
  frontend:
    image: docker.io/finkingma/blinddatingapp-frontend
    container_name: blinddatingapp-frontend
    ports:
      - "3000:3000"
    restart: always

  date:
    image: docker.io/finkingma/date-service
    container_name: date-service
    networks:
      - local-kafka
    ports:
      - "9083:9083"
    environment:
      spring.kafka.bootstrap-servers: broker:9093
      endpoints.profileservice: http://profile:9080
    restart: always
    depends_on:
      broker:
        condition: service_started

  websocket:
    image: docker.io/finkingma/websocket-service
    container_name: websocket-service
    networks:
      - local-kafka
    ports:
      - "9082:9082"
    environment:
      spring.kafka.bootstrap-servers: broker:9093
    restart: always
    depends_on:
      broker:
        condition: service_started

  matching:
    image: docker.io/finkingma/matching-service
    container_name: matching-service
    networks:
      - local-kafka
    ports:
      - "9081:9081"
    environment:
      spring.kafka.bootstrap-servers: broker:9093
      endpoints.profileservice: http://profile:9080
    restart: always
    depends_on:
      broker:
        condition: service_started

  profile:
    image: docker.io/finkingma/profile-service
    container_name: profile-service
    ports:
      - "9080:9080"
    environment:
      spring.kafka.bootstrap-servers: broker:9093
      spring.datasource.url: jdbc:postgresql://postgres:5432/postgres?useSSL=false
    restart: always
    networks:
      - local-kafka
      - postgres
    depends_on:
      postgres:
        condition: service_started

# SUPPORTIVE TOOLS BELOW

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    networks:
      - local-kafka
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    networks:
      - local-kafka
    ports:
      # To learn about configuring Kafka for access across networks see
      # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - "9092:9092"
      - "9093:9093"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LISTENERS: PLAINTEXT_INTERNAL://0.0.0.0:29092,PLAINTEXT_C://0.0.0.0:9093,PLAINTEXT_L://0.0.0.0:9092,
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_INTERNAL://broker:29092,PLAINTEXT_L://localhost:9092,PLAINTEXT_C://broker:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_INTERNAL:PLAINTEXT,PLAINTEXT_L:PLAINTEXT,PLAINTEXT_C:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    networks:
      - local-kafka
    depends_on:
      - broker
    ports:
      - "7777:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=broker
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=broker:9093
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181

  postgres:
    image: postgres
    ports:
      - 5432:5432
    restart: always
    networks:
      - postgres
    shm_size: 128mb
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: example

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4_container
    restart: always
    networks:
      - postgres
    ports:
      - "8888:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: user-name@domain-name.com
      PGADMIN_DEFAULT_PASSWORD: strong-password
    volumes:
      - C:\pgadmin-data:/var/lib/pgadmin

networks:
  local-kafka:
    driver: bridge
  postgres:
    driver: bridge